trigger:
  batch: true
  branches:
    include:
#      - master # Not deploying to master branch yet
      - feature/*

pr:
  branches:
    exclude:
    - master
    - feature/*
    - '*'

resources:
  repositories:
  - repository: platform-helm
    type: github
    name: nhs-digital-gp-it-futures/platform-helm
    endpoint: nhs-digital-gp-it-futures

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: buildBranchKeyVault
  displayName: Build Branch Key Vault
  variables:
    - group: dev-core-secrets
    - name: tfVersion
      value: 0.12.24

  steps:

    - bash: |
        shortBranchName=$(echo $BUILD_SOURCEBRANCH | cut -d'-' -f 1 | cut -d'/' -f 3-5 | sed 's!/!-!g')
        echo "##vso[task.setvariable variable=release]$shortBranchName"
        echo Calculated branch name is: $shortBranchName
      displayName: Get Branch Name
      env:
        BUILD_SOURCEBRANCH: $(Build.SourceBranch)

    - task: CopyFiles@2
      displayName: Copy KeyVault Config Files
      inputs:
        SourceFolder: 'generateKeyVault'
        Contents: '**'
        TargetFolder: '$(build.artifactStagingDirectory)/generateKeyVault'
        CleanTargetFolder: false
        OverWrite: true

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: Install Terraform $(tfVersion)
      inputs:
        terraformVersion: $(tfVersion)

    - task: TerraformTaskV1@0
      displayName: 'Terraform Initialise (Key Vault)'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(build.artifactStagingDirectory)/generateKeyVault'
        backendServiceArm: 'NHSAPP-BuyingCatalogue (Non-Prod)'
        backendAzureRmResourceGroupName: 'gpitfutures-rg-sa'
        backendAzureRmStorageAccountName: 'gpitfuturessatf'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'gpit.$(release).keyvault.terraform.tfstate'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Plan (Key Vault)'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(build.artifactStagingDirectory)/generateKeyVault'
        commandOptions: '-var="environment=$(release)" -var="keyvault=gpit-$(release)-kv" -var="keyvaultrg=$(release)-kv-rg" -var="kv_addrprefix=10.201" -var="kv_sqlusername=gpitfbcadmin" -var="kv_coreurl=buyingcatalogue.digital.nhs.uk" -var="region=uksouth" -var="subscription_id=7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec" -var="tenant_id=50f6071f-bbfe-401a-8803-673748e629e2" -var="pjtcode=gpit" -var="project=gpitfutures"'
        environmentServiceNameAzureRM: 'NHSAPP-BuyingCatalogue (Non-Prod)'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply (Key Vault)'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(build.artifactStagingDirectory)/generateKeyVault'
        commandOptions: '-var="environment=$(release)" -var="keyvault=gpit-$(release)-kv" -var="keyvaultrg=$(release)-kv-rg" -var="kv_addrprefix=10.201" -var="kv_sqlusername=gpitfbcadmin" -var="kv_coreurl=buyingcatalogue.digital.nhs.uk" -var="region=uksouth" -var="subscription_id=7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec" -var="tenant_id=50f6071f-bbfe-401a-8803-673748e629e2" -var="pjtcode=gpit" -var="project=gpitfutures"'
        environmentServiceNameAzureRM: 'NHSAPP-BuyingCatalogue (Non-Prod)'

- job: buildBranchEnvironment
  dependsOn: buildBranchKeyVault
  displayName: Build Branch Environment
  variables:
    - group: dev-core-secrets
    - name: tfVersion
      value: 0.12.24

  steps:

    - bash: |
        shortBranchName=$(echo $BUILD_SOURCEBRANCH | cut -d'-' -f 1 | cut -d'/' -f 3-5 | sed 's!/!-!g')
        echo "##vso[task.setvariable variable=release]$shortBranchName"
        echo Calculated branch name is: $shortBranchName
      displayName: Get Branch Name
      env:
        BUILD_SOURCEBRANCH: $(Build.SourceBranch)

    - task: CopyFiles@2
      displayName: Copy Branch Environment Config Files
      inputs:
        SourceFolder: 'terraform'
        Contents: '**'
        TargetFolder: '$(build.artifactStagingDirectory)/terraform'
        CleanTargetFolder: false
        OverWrite: true
      
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: Install Terraform $(tfVersion)
      inputs:
        terraformVersion: $(tfVersion)
      
    - task: TerraformTaskV1@0
      displayName: 'Terraform Initialise (Branch Environment)'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(build.artifactStagingDirectory)/terraform'
        backendServiceArm: 'NHSAPP-BuyingCatalogue (Non-Prod)'
        backendAzureRmResourceGroupName: 'gpitfutures-rg-sa'
        backendAzureRmStorageAccountName: 'gpitfuturessatf'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'gpit.$(release).terraform.tfstate'
      
    - task: TerraformTaskV1@0
      displayName: 'Terraform Plan (Branch Environment)'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(build.artifactStagingDirectory)/terraform'
        commandOptions: '-var="environment=$(release)" -var="keyvault=gpit-$(release)-kv" -var="keyvaultrg=$(release)-kv-rg" -var="region=uksouth" -var="subscription_id=7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec" -var="tenant_id=50f6071f-bbfe-401a-8803-673748e629e2" -var="pjtcode=gpit" -var="project=gpitfutures"'
        environmentServiceNameAzureRM: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      
    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply (Branch Environment)'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(build.artifactStagingDirectory)/terraform'
        commandOptions: '-var="environment=$(release)" -var="keyvault=gpit-$(release)-kv" -var="keyvaultrg=$(release)-kv-rg" -var="region=uksouth" -var="subscription_id=7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec" -var="tenant_id=50f6071f-bbfe-401a-8803-673748e629e2" -var="pjtcode=gpit" -var="project=gpitfutures"'
        environmentServiceNameAzureRM: 'NHSAPP-BuyingCatalogue (Non-Prod)'   

- job: checkIfFirstRun 

  dependsOn: buildBranchEnvironment
  displayName: Check if first run on new Cluster

  steps:
  - bash: | 
      shortBranchName=$(echo $BUILD_SOURCEBRANCH | cut -d'-' -f 1 | cut -d'/' -f 3-5 | sed 's!/!-!g')
      echo "##vso[task.setvariable variable=release]$shortBranchName"
      echo Calculated branch name is: $shortBranchName
    displayName: Get Branch Name
    env:
      BUILD_SOURCEBRANCH: $(Build.SourceBranch)

  - task: AzureCLI@2
    name: kubectlContext
    displayName: Get Kubernetes Context
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az aks get-credentials -n gpitfutures-$(release)-aks -g gpitfutures-$(release)-rg-aks'

  - bash: |
      echo "Checking if this is first run..."
      agNamespace=$(kubectl get namespace ingress-appgw)
      if [[ -z "$agNamespace" ]]; then
        echo "First Run"
        echo "##vso[task.setvariable variable=firstRun;isOutput=true]Yes" #set variable firstRun to Yes
      else
        echo "Not First Run"
      fi 
    name: DetermineResult
    
- job: prepareAKSEnvironment
  displayName: Prepare AKS Environment
  dependsOn: checkIfFirstRun
  condition: eq(dependencies.checkIfFirstRun.outputs['DetermineResult.firstRun'], 'Yes')
  variables:
    - group: dev-secrets

  steps:
  - bash: |
      shortBranchName=$(echo $BUILD_SOURCEBRANCH | cut -d'-' -f 1 | cut -d'/' -f 3-5 | sed 's!/!-!g')
      echo "##vso[task.setvariable variable=release]$shortBranchName"
      echo Calculated branch name is: $shortBranchName
    displayName: Get Branch Name
    env:
      BUILD_SOURCEBRANCH: $(Build.SourceBranch)
  
  - task: AzureCLI@2
    name: kubectlContext
    displayName: Get Kubernetes Context
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az aks get-credentials -n gpitfutures-$(release)-aks -g gpitfutures-$(release)-rg-aks'

  - task: AzureCLI@2
    name: kubectlInstallAAD
    displayName: Install AAD Pod Identity
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'kubectl create -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml'
    enabled: false  ##### Duplicate ####

  - task: AzureCLI@2
    name: kubectlCreateIngressNamespace
    displayName: Create Ingress Namespace
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'kubectl create namespace ingress-appgw'  

  - task: AzureCLI@2
    name: kubectlDeployRBAC
    displayName: Deploy RBAC
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'kubectl create -f ./ingress/deployment-rbac.yaml'
      failOnStandardError: false
    continueOnError: true
    enabled: true

  - task: AzureCLI@2
    name: kubectlGetIdentity
    displayName: AAD - Generate Identity (MSI) file
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az identity list -g gpitfutures-$(release)-rg-aks -o json > ./ingress/$(release)-msi.txt'
      
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript:  |
          release=$(release)
      
          aadClientId=$(az identity list --query "[?name=='gpitfutures-$release-aad-id'].clientId" -o tsv)
          aadIdPath=$(az identity list --query "[?name=='gpitfutures-$release-aad-id'].id" -o tsv)
          aksSpId=$(az aks list -g gpitfutures-$release-rg-aks --query "[?name=='gpitfutures-$release-aks'].servicePrincipalProfile.clientId" -o tsv)
          aksFqdn=$(az aks list -g gpitfutures-$release-rg-aks --query "[?name=='gpitfutures-$release-aks'].fqdn" -o tsv)
          appgwId=$(az network application-gateway list --query "[?name=='gpitfutures-$release-appgw'].id" -o tsv)
          appgwRgName=$(az network application-gateway list --query "[?name=='gpitfutures-$release-appgw'].resourceGroup" -o tsv)
          appgwRgId=$(az group list --query "[?name=='gpitfutures-$release-rg-appgw'].id" -o tsv)
          subId=$(az account list --query "[?name=='GP IT Futures Buying Catalogue'].id" -o tsv --all)

          echo "##vso[task.setvariable variable=aadClientId]$aadClientId"
          echo "##vso[task.setvariable variable=aadIdPath]$aadIdPath"          
          echo "##vso[task.setvariable variable=aksSpId]$aksSpId"
          echo "##vso[task.setvariable variable=aksFqdn]$aksFqdn"
          echo "##vso[task.setvariable variable=appgwId]$appgwId"
          echo "##vso[task.setvariable variable=appgwRgName]$appgwRgName"
          echo "##vso[task.setvariable variable=appgwRgId]$appgwRgId"
          echo "##vso[task.setvariable variable=subId]$subId"

          #echo subId is: $subId

    name: getAADValues
    displayName: AAD - Get client Values 

  - bash: |
          cat ./ingress/aadpodidentity-template.txt | sed -e "s*\${name}*gpitfutures-$(release)-aad-id*" | sed -e "s*\${idPath}*$(aadIdPath)*" | sed -e "s*\${clientID}*$(aadClientId)*" > ./ingress/$(release)-aadpodidentity.yaml
          cat ./ingress/aadpodidentitybinding-template.txt  | sed -e "s*\${name}*gpitfutures-$(release)-aad-id*" | sed -e "s*\${clientID}*$(aadClientId)*" > ./ingress/$(release)-aadpodidentitybinding.yaml
          #cat ./ingress/$(release)-aadpodidentitybinding.yaml
    name: generateAADtemplates
    displayName: AAD - Generate Templates 

  # - bash: 'ls -R'
  #   displayName: Get Folders (Templates)

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
          release=$(release)
          kubectl apply -f ./ingress/$(release)-aadpodidentity.yaml -n ingress-appgw
          kubectl apply -f ./ingress/$(release)-aadpodidentitybinding.yaml -n ingress-appgw
          az role assignment create --role "Managed Identity Operator" --assignee $(aksSpId) --scope $(aadIdPath)
    name: applyAADConfig
    displayName: AAD - Apply Config
    enabled: true

  - task: HelmInstaller@1
    displayName: 'Helm - Install'
    inputs:
      helmVersionToInstall: 'latest'

  - bash: |
        release=$(release)
        agicshared="false"
        agicnamespaces=""
        cat ./ingress/helm-agic-config-template.txt | sed -e "s*\${subId}*$(subId)*" | sed -e "s*\${appgwRg}*$(appgwRgName)*" | sed -e "s*\${appgwName}*gpitfutures-$release-appgw*" | sed -e "s*\${aadId}*$(aadIdPath)*" | sed -e "s*\${clientId}*$(aadClientId)*" | sed -e "s*\${apiAddress}*$(aksFqdn)*" | sed -e "s*\${shared}*$agicshared*" | sed -e "s*\${namespaces}*$agicnamespaces*" > ./ingress/$release-helm-config.yaml
        #cat ./ingress/$release-helm-config.yaml
    name: generateHelmTemplates
    displayName: Agic - Generate Templates 

  - bash: |
      helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
      helm repo update
      helm install ingress-azure -f ./ingress/$(release)-helm-config.yaml application-gateway-kubernetes-ingress/ingress-azure -n ingress-appgw #--dry-run --debug
    displayName: 'Agic - Install'

- job: deployBCApplication
  displayName: Deploy BC Application
  dependsOn: prepareAKSEnvironment
  variables:
    - group: dev-secrets

  steps:
  - bash: |
      shortBranchName=$(echo $BUILD_SOURCEBRANCH | cut -d'-' -f 1 | cut -d'/' -f 3-5 | sed 's!/!-!g')
      echo "##vso[task.setvariable variable=release]$shortBranchName"
      echo Calculated branch name is: $shortBranchName
    displayName: Get Branch Name
    env:
      BUILD_SOURCEBRANCH: $(Build.SourceBranch)
  
  - task: AzureCLI@2
    name: kubectlContext
    displayName: Get Kubernetes Context
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az aks get-credentials -n gpitfutures-$(release)-aks -g gpitfutures-$(release)-rg-aks'

  - checkout: platform-helm      

  - task: DownloadPipelineArtifact@2
    displayName: Download Helm Pipeline Artifact
    inputs:
      buildType: 'specific'
      project: 'c5f97979-5b03-4d10-ba8d-871d0526b408'
      definition: '75'
      buildVersionToDownload: 'latest'
      targetPath: '$(build.ArtifactStagingDirectory)'

  # - task: AzureCLI@2
  #   name: kubectlCreateAppNamespace
  #   displayName: Create App Namespace
  #   inputs:
  #     azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
  #     scriptType: 'bash'
  #     scriptLocation: 'inlineScript'
  #     inlineScript: 'kubectl create namespace $(release)'  

  - bash: 'ls -R'
    displayName: Get Folders (Sources Dir)
    workingDirectory: '$(Build.SourcesDirectory)'

  - bash: 'ls -R'
    displayName: Get Folders (Artifacts)
    workingDirectory: '$(build.ArtifactStagingDirectory)'

  - task: AzureCLI@2
    name: kubectlContext
    displayName: Get Kubernetes Context
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'kubectl get namespaces'