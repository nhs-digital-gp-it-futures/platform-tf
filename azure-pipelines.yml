trigger:
  batch: true
  branches:
    include:
      - master
#      - feature/*

  # paths:
  #   include:
  #   - /*
  #   exclude:
  #   - housekeeping/*
  #   - docs/*

# pr:
#   branches:
#     include:
#     - master
  # paths:
  #   include:
  #   - /*
  #   exclude:
  #   - housekeeping/*
  #   - docs/*

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: setupEnvironment
  displayName: Setup Environment
  variables:
    - group: dev-core-secrets
  steps:
    - task: DownloadSecureFile@1
      displayName: Download Secret
      name: TFState
      inputs:
        secureFile: gpitfutures.devsub.tfstate.tf
      #$(TFState.secureFilePath)

    - task: CopyFiles@2
      displayName: Copy KeyVault Config Files
      inputs:
        SourceFolder: 'generateKeyVault'
        Contents: '**'
        TargetFolder: '$(build.artifactStagingDirectory)/generateKeyVault'
        CleanTargetFolder: false
        OverWrite: true

    - task: CopyFiles@2
      displayName: Copy Secure Files (tfstate)
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: 'gpitfutures.devsub.tfstate.tf'
        TargetFolder: '$(build.artifactStagingDirectory)'
        CleanTargetFolder: false
        OverWrite: true

    - bash: 'ls -R'
      displayName: Get Folders (DEBUG)
      workingDirectory: '$(build.artifactStagingDirectory)'

- job: buildBranchKeyVault
  displayName: Build Branch Key Vault
  variables:
    - group: dev-core-secrets
    - name: tfVersion
      value: 0.12.24
    - name: release
      value: feature-1234
  steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: Install Terraform $(tfVersion)
      inputs:
        terraformVersion: $(tfVersion)

    - task: TerraformTaskV1@0
      displayName: 'Terraform Initialise (Key Vault)'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(build.artifactStagingDirectory)/generateKeyVault'
        backendServiceArm: 'NHSAPP-BuyingCatalogue (Non-Prod)'
        backendAzureRmResourceGroupName: 'gpitfutures-rg-sa'
        backendAzureRmStorageAccountName: 'gpitfuturessatf'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'gpit.$(release).keyvault.terraform.tfstate'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Plan (Key Vault)'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(build.artifactStagingDirectory)/generateKeyVault'
        commandOptions: '-var="environment=$release" -var="keyvault=gpit-$release-kv" -var="keyvaultrg=$release-kv-rg" -var="kv_addrprefix=10.201" -var="kv_sqlusername=gpitfbcadmin" -var="kv_coreurl=buyingcatalogue.digital.nhs.uk"'
        environmentServiceNameAzureRM: 'NHSAPP-BuyingCatalogue (Non-Prod)'


    # - task: AzureCLI@2
    #   name: tfInitialiseKv
    #   displayName: Terraform Initialise (Key Vault)
    #   inputs:
    #     azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
    #     scriptType: 'bash'
    #     scriptLocation: 'inlineScript'
    #     workingDirectory: '$(build.artifactStagingDirectory)/generateKeyVault'
    #     inlineScript: 'Terraform init -backend-config "../gpitfutures.devsub.tfstate.tf" -backend-config="key=gpit.$(release).keyvault.terraform.tfstate"'

    # - task: AzureCLI@2
    #   name: tfPlanKv
    #   displayName: Terraform Plan (Key Vault)
    #   inputs:
    #     azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
    #     scriptType: 'bash'
    #     scriptLocation: 'inlineScript'
    #     workingDirectory: '$(build.artifactStagingDirectory)/generateKeyVault'
    #     inlineScript: 'terraform plan -var-file "./gpitfutures.devsub.tfvars" --var="environment=$release" -var="keyvault=gpit-$release-kv" -var="keyvaultrg=$release-kv-rg" -var="kv_addrprefix=10.201" -var="kv_sqlusername=gpitfbcadmin" -var="kv_coreurl=buyingcatalogue.digital.nhs.uk"'  

# - job: setupEnvironment
#   displayName: Setup Environment
#   variables:
#     - group: dev-core-secrets
#     - name: tfVersion
#       value: 0.12.24
#   steps:
# - task: CopyFiles@2
#   displayName: Copy Secure Files
#   inputs:
#     SourceFolder: 'terraform'
#     Contents: '**'
#     TargetFolder: '$(build.artifactStagingDirectory)/terraform'
#     CleanTargetFolder: false
#     OverWrite: true  